<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Sop.Data</name>
    </assembly>
    <members>
        <member name="T:Sop.Data.BaseEntity">
            <summary>
            Base class for entities
            </summary>
        </member>
        <member name="P:Sop.Data.BaseEntity.Id">
            <summary>
            Gets or sets the entity identifier
            </summary>
        </member>
        <member name="M:Sop.Data.BaseEntity.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.BaseEntity.IsTransient(Sop.Data.BaseEntity)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.BaseEntity.GetUnproxiedType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.BaseEntity.Equals(Sop.Data.BaseEntity)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.BaseEntity.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.BaseEntity.op_Equality(Sop.Data.BaseEntity,Sop.Data.BaseEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.BaseEntity.op_Inequality(Sop.Data.BaseEntity,Sop.Data.BaseEntity)">
            <summary>
            
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Data.Caching.CacheExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Caching.CacheExtensions.Get``1(Sop.Data.Caching.ICacheManager,System.String,System.Func{``0})">
            <summary>
            
            </summary>
            <param name="cacheManager"></param>
            <param name="key"></param>
            <param name="acquire"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.CacheExtensions.Get``1(Sop.Data.Caching.ICacheManager,System.String,System.Int32,System.Func{``0})">
            <summary>
            
            </summary>
            <param name="cacheManager"></param>
            <param name="key"></param>
            <param name="cacheTime"></param>
            <param name="acquire"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.CacheExtensions.RemoveByPattern(Sop.Data.Caching.ICacheManager,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            
            </summary>
            <param name="cacheManager"></param>
            <param name="pattern"></param>
            <param name="keys"></param>
        </member>
        <member name="T:Sop.Data.Caching.ICacheManager">
            <summary>
            缓存管理接口
            </summary>
        </member>
        <member name="M:Sop.Data.Caching.ICacheManager.Get``1(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.ICacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Sop.Data.Caching.ICacheManager.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeSpan"></param>
        </member>
        <member name="M:Sop.Data.Caching.ICacheManager.IsSet(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.ICacheManager.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Sop.Data.Caching.ICacheManager.RemoveByPattern(System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Sop.Data.Caching.ICacheManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Data.Caching.MemoryCacheManager">
            <summary>
            Represents a manager for caching between HTTP requests (long term caching)
            </summary>
        </member>
        <member name="P:Sop.Data.Caching.MemoryCacheManager.Cache">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.Get``1(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeSpan"></param>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.IsSet(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.Remove(System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.RemoveByPattern(System.String)">
            <summary>
            
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Caching.MemoryCacheManager.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Data.Caching.RedisCacheManager">
            <summary>
                使用Redis的缓存服务实现
            </summary>
        </member>
        <member name="P:Sop.Data.Caching.RedisCacheManager.Instance">
            <summary>
            </summary>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.#ctor(StackExchange.Redis.ConfigurationOptions)">
            <summary>
            </summary>
            <param name="cnnection"></param>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.Server(System.Net.EndPoint)">
            <summary>
            </summary>
            <param name="endPoint"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.GetEndpoints">
            <summary>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.FlushDb(System.Nullable{System.Int32})">
            <summary>
            </summary>
            <param name="db"></param>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.Get``1(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.Set(System.String,System.Object,System.Int32)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="data"></param>
            <param name="cacheTime"></param>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="timeSpan"></param>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.IsSet(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.Remove(System.String)">
            <summary>
            </summary>
            <param name="key"></param>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.RemoveByPattern(System.String)">
            <summary>
            </summary>
            <param name="pattern"></param>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.Clear">
            <summary>
            </summary>
        </member>
        <member name="M:Sop.Data.Caching.RedisCacheManager.Dispose">
            <summary>
            </summary>
        </member>
        <member name="T:Sop.Data.CommonHelper">
            <summary>
            Represents a common helper
            </summary>
        </member>
        <member name="M:Sop.Data.CommonHelper.EnsureSubscriberEmailOrThrow(System.String)">
            <summary>
            Ensures the subscriber email or throw.
            </summary>
            <param name="email">The email.</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.IsValidEmail(System.String)">
            <summary>
            Verifies that a string is in valid e-mail format
            </summary>
            <param name="email">Email to verify</param>
            <returns>true if the string is a valid e-mail address and false if it's not</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.IsValidIpAddress(System.String)">
            <summary>
            Verifies that string is an valid IP-Address
            </summary>
            <param name="ipAddress">IPAddress to verify</param>
            <returns>true if the string is a valid IpAddress and false if it's not</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.GenerateRandomDigitCode(System.Int32)">
            <summary>
            Generate random digit code
            </summary>
            <param name="length">Length</param>
            <returns>Result string</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.GenerateRandomInteger(System.Int32,System.Int32)">
            <summary>
            Returns an random interger number within a specified rage
            </summary>
            <param name="min">Minimum number</param>
            <param name="max">Maximum number</param>
            <returns>Result</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.EnsureMaximumLength(System.String,System.Int32,System.String)">
            <summary>
            Ensure that a string doesn't exceed maximum allowed length
            </summary>
            <param name="str">Input string</param>
            <param name="maxLength">Maximum length</param>
            <param name="postfix">A string to add to the end if the original string was shorten</param>
            <returns>Input string if its lengh is OK; otherwise, truncated input string</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.EnsureNumericOnly(System.String)">
            <summary>
            Ensures that a string only contains numeric values
            </summary>
            <param name="str">Input string</param>
            <returns>Input string with only numeric values, empty string if input is null/empty</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.EnsureNotNull(System.String)">
            <summary>
            Ensure that a string is not null
            </summary>
            <param name="str">Input string</param>
            <returns>Result</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.AreNullOrEmpty(System.String[])">
            <summary>
            Indicates whether the specified strings are null or empty strings
            </summary>
            <param name="stringsToValidate">Array of strings to validate</param>
            <returns>Boolean</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.ArraysEqual``1(``0[],``0[])">
            <summary>
            Compare two arrasy
            </summary>
            <typeparam name="T">Type</typeparam>
            <param name="a1">Array 1</param>
            <param name="a2">Array 2</param>
            <returns>Result</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Sets a property on an object to a valuae.
            </summary>
            <param name="instance">The object whose property to set.</param>
            <param name="propertyName">The name of the property to set.</param>
            <param name="value">The value to set the property to.</param>
        </member>
        <member name="M:Sop.Data.CommonHelper.To(System.Object,System.Type)">
            <summary>
            Converts a value to a destination type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert the value to.</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.To(System.Object,System.Type,System.Globalization.CultureInfo)">
            <summary>
            Converts a value to a destination type.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="destinationType">The type to convert the value to.</param>
            <param name="culture">Culture</param>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.To``1(System.Object)">
            <summary>
            Converts a value to a destination type.
            </summary>
            <param name="value">The value to convert.</param>
            <typeparam name="T">The type to convert the value to.</typeparam>
            <returns>The converted value.</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.ConvertEnum(System.String)">
            <summary>
            Convert enum for front-end
            </summary>
            <param name="str">Input string</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.SetTelerikCulture">
            <summary>
            Set Telerik (Kendo UI) culture
            </summary>
        </member>
        <member name="M:Sop.Data.CommonHelper.GetDifferenceInYears(System.DateTime,System.DateTime)">
            <summary>
            Get difference in years
            </summary>
            <param name="startDate"></param>
            <param name="endDate"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.CommonHelper.MapPath(System.String)">
            <summary>
            Maps a virtual path to a physical disk path.
            </summary>
            <param name="path">The path to map. E.g. "~/bin"</param>
            <returns>The physical path. E.g. "c:\inetpub\wwwroot\bin"</returns>
        </member>
        <member name="T:Sop.Data.Encryption.Aes">
            <summary>
            AES对称加密(256位)
            </summary>
        </member>
        <member name="M:Sop.Data.Encryption.Aes.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="encryptStr">明文</param>
            <param name="key">密钥</param>
            <returns>密文</returns>
        </member>
        <member name="M:Sop.Data.Encryption.Aes.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="decryptStr">密文</param>
            <param name="key">密钥</param>
            <returns>明文</returns>
        </member>
        <member name="T:Sop.Data.Encryption.OSS">
            <summary>
            阿里云OSS的加密工具类
            </summary>
        </member>
        <member name="T:Sop.Data.Encryption.SHA">
            <summary>
            非对称加密(SHA512)
            </summary>
        </member>
        <member name="M:Sop.Data.Encryption.SHA.Encrypt(System.String,System.String)">
            <summary>
            加密
            </summary>
            <param name="encryptStr">明文</param>
            <param name="salt">盐</param>
            <returns>密文</returns>
        </member>
        <member name="M:Sop.Data.Encryption.SHA.Encrypt(System.String)">
            <summary>
            加密
            </summary>
            <param name="encryptStr">明文</param>
            <returns>密文</returns>
        </member>
        <member name="T:Sop.Data.Environment.Application">
            <summary>
                应用程序元数据
            </summary>
        </member>
        <member name="P:Sop.Data.Environment.Application.Id">
            <summary>
            </summary>
        </member>
        <member name="P:Sop.Data.Environment.Application.Name">
            <summary>
            </summary>
        </member>
        <member name="P:Sop.Data.Environment.Application.Description">
            <summary>
            </summary>
        </member>
        <member name="P:Sop.Data.Environment.Application.Enabled">
            <summary>
            </summary>
        </member>
        <member name="T:Sop.Data.Environment.ApplicationManager">
            <summary>
            应用程序加载器
            </summary>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.Initialize">
            <summary>
            扫描应用程序目录，加载所有的应用程序
            </summary>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.GetApplication(System.String)">
            <summary>
            根据一个应用的Id获取应用对应的元数据
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.GetApplication(System.Reflection.Assembly)">
            <summary>
            根据一个应用的程序集获取应用对应的元数据
            </summary>
            <param name="assembly"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.GetAllWidgets">
            <summary>
            获取所有的应用程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.IsApplicationInstalled(System.String)">
            <summary>
            判断一个应用是否已经安装
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.AvailableApplications">
            <summary>
            所有可用的应用程序
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.GetAssemblyPath(System.String)">
            <summary>
            根据一个应用的Id获取其程序集在Applications目录中的路径和名称
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.GetDependenciesAssemblyPath(System.String)">
            <summary>
            根据一个应用的Id获取其程序集在Dependencies目录中的路径和名称
            </summary>
            <param name="applicationId"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.FindApplication(System.String)">
            <summary>
            读取配置文件，加载一个应用程序
            </summary>
            <param name="applicationConfigPath"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Environment.ApplicationManager.LoadApplication(Sop.Data.Environment.Application)">
            <summary>
            加载指定的应用程序
            </summary>
            <param name="application"></param>
        </member>
        <member name="T:Sop.Data.Environment.DiContainer">
            <summary>
            依赖注入容器
            </summary>
        </member>
        <member name="M:Sop.Data.Environment.DiContainer.RegisterContainer(Autofac.IContainer)">
            <summary>
            注册DIContainer
            </summary>
            <param name="container">Autofac.IContainer</param>
        </member>
        <member name="M:Sop.Data.Environment.DiContainer.GetContainer">
            <summary>
            获取IContainer
            </summary>
            <returns>Autofac.IContainer</returns>
        </member>
        <member name="M:Sop.Data.Environment.DiContainer.Resolve``1">
            <summary>
            按类型获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Sop.Data.Environment.DiContainer.ResolveNamed``1(System.String)">
            <summary>
            按名称获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="serviceName">组件名称</param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Sop.Data.Environment.DiContainer.Resolve``1(Autofac.Core.Parameter[])">
            <summary>
            按参数获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="parameters"><see cref="T:Autofac.Core.Parameter"/></param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="M:Sop.Data.Environment.DiContainer.ResolveKeyed``1(System.Object)">
            <summary>
            按key获取组件
            </summary>
            <typeparam name="TService">组件类型</typeparam>
            <param name="serviceKey">枚举类型的Key</param>
            <returns>返回获取的组件</returns>
        </member>
        <member name="T:Sop.Data.Environment.IApplicationStarter">
            <summary>
            应用程序启动器接口
            </summary>
        </member>
        <member name="M:Sop.Data.Environment.IApplicationStarter.Start(Autofac.IContainer,System.Reflection.Assembly[])">
            <summary>
            ff
            </summary>
            <param name="container"></param>
            <param name="assemblies"></param>
        </member>
        <member name="T:Sop.Data.Events.CommonEventArgs">
            <summary>
            通用事件参数
            </summary>
        </member>
        <member name="M:Sop.Data.Events.CommonEventArgs.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="eventOperationType">事件操作类型
            <remarks>
            建议使用<see cref="T:Sop.Data.Events.EventOperationType"/>协助输入，例如：<br/>
            EventOperationType.Instance().Create()
            </remarks>
            </param>
        </member>
        <member name="P:Sop.Data.Events.CommonEventArgs.EventOperationType">
            <summary>
            事件操作类型
            </summary>
            <remarks>
            建议使用<see cref="T:Sop.Data.Events.EventOperationType"/>协助输入，例如：<br/>
            EventOperationType.Instance().Create()
            </remarks>
        </member>
        <member name="T:Sop.Data.Events.EventBus`1">
            <summary>
            事件总线（用于定义事件、触发事件）
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
        </member>
        <member name="M:Sop.Data.Events.EventBus`1.Instance">
            <summary>
            获取实例
            </summary>
            <returns>返回EventBus实例</returns>
        </member>
        <member name="T:Sop.Data.Events.EventBus`2">
            <summary>
            事件总线（用于定义事件、触发事件）
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="T">通用事件参数</typeparam>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.Instance">
            <summary>
            获取实例
            </summary>
            <returns>返回EventBus实例</returns>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.#ctor">
            <summary>
            私有构造函数
            </summary>
        </member>
        <member name="E:Sop.Data.Events.EventBus`2.Before">
            <summary>
            操作执行前事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.EventBus`2.After">
            <summary>
            操作执行后事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.EventBus`2.BeforeWithHistory">
            <summary>
            含历史数据操作执行前事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.EventBus`2.AfterWithHistory">
            <summary>
            含历史数据操作执行后事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.EventBus`2.BatchBefore">
            <summary>
            批量操作执行前事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.EventBus`2.BatchAfter">
            <summary>
            批量操作执行后事件
            </summary>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.OnBefore(`0,`1)">
            <summary>
            触发操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.OnAfter(`0,`1)">
            <summary>
            触发操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.OnBeforeWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.OnAfterWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.OnBatchBefore(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行前事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.OnBatchAfter(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行后事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Sop.Data.Events.EventBus`2.InvokeCallback(System.IAsyncResult)">
            <summary>
            事件执行结果回调
            </summary>
            <param name="asyncResult"></param>
        </member>
        <member name="T:Sop.Data.Events.EventOperationType">
            <summary>
            事件操作类型
            </summary>
        </member>
        <member name="M:Sop.Data.Events.EventOperationType.Instance">
            <summary>
            获取实例
            </summary>
            <returns>返回EventOperationType对象</returns>
        </member>
        <member name="M:Sop.Data.Events.EventOperationType.Create">
            <summary>
            创建
            </summary>
        </member>
        <member name="M:Sop.Data.Events.EventOperationType.Update">
            <summary>
            更新
            </summary>
        </member>
        <member name="M:Sop.Data.Events.EventOperationType.Delete">
            <summary>
            删除
            </summary>
        </member>
        <member name="T:Sop.Data.Events.CommonEventHandler`2">
            <summary>
            用于事件处理的通用委托
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="T:Sop.Data.Events.EventHandlerWithHistory`2">
            <summary>
            用于事件处理带历史数据的委托
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="T:Sop.Data.Events.BatchEventHandler`2">
            <summary>
            一组批量事件处理的委托
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="T:Sop.Data.Events.IEventBus`2">
            <summary>
            事件总线接口
            </summary>
            <typeparam name="S">触发事件的对象类型</typeparam>
            <typeparam name="A">事件参数的对象类型</typeparam>
        </member>
        <member name="E:Sop.Data.Events.IEventBus`2.Before">
            <summary>
            操作执行前事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.IEventBus`2.After">
            <summary>
            操作执行后事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.IEventBus`2.BeforeWithHistory">
            <summary>
            含历史数据操作执行前事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.IEventBus`2.AfterWithHistory">
            <summary>
            含历史数据操作执行后事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.IEventBus`2.BatchBefore">
            <summary>
            批量操作执行前事件
            </summary>
        </member>
        <member name="E:Sop.Data.Events.IEventBus`2.BatchAfter">
            <summary>
            批量操作执行后事件
            </summary>
        </member>
        <member name="M:Sop.Data.Events.IEventBus`2.OnBefore(`0,`1)">
            <summary>
            触发操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Sop.Data.Events.IEventBus`2.OnAfter(`0,`1)">
            <summary>
            触发操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Sop.Data.Events.IEventBus`2.OnBeforeWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行前事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Sop.Data.Events.IEventBus`2.OnAfterWithHistory(`0,`1,`0)">
            <summary>
            触发含历史数据操作执行后事件
            </summary>
            <param name="sender">触发事件的对象</param>
            <param name="eventArgs">事件参数</param>
            <param name="historyData">触发事件对象的历史数据（例如S从一种状态变更为另一种状态，historyData指变更前的对象）</param>
        </member>
        <member name="M:Sop.Data.Events.IEventBus`2.OnBatchBefore(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行前事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="M:Sop.Data.Events.IEventBus`2.OnBatchAfter(System.Collections.Generic.IEnumerable{`0},`1)">
            <summary>
            触发批量操作执行后事件
            </summary>
            <param name="senders">触发事件的对象集合</param>
            <param name="eventArgs">事件参数</param>
        </member>
        <member name="T:Sop.Data.Events.IEventModule">
            <summary>
            事件处理程序模块接口
            </summary>
        </member>
        <member name="M:Sop.Data.Events.IEventModule.RegisterEventHandler">
            <summary>
            注册事件处理程序
            </summary>
        </member>
        <member name="T:Sop.Data.Extensions.DateTimeExtension">
            <summary>
            DateTime扩展方法
            </summary>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.ToTimestamp(System.DateTime)">
            <summary>
            DateTime时间格式转换为Unix时间戳格式
            </summary>
            <param name="dateTime">DateTime时间格式</param>
            <returns>Unix时间戳格式</returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.FromTimestamp(System.DateTime,System.Int64)">
            <summary>
            Unix时间戳格式转换为DateTime时间格式
            </summary>
            <param name="dateTime">DateTime时间格式</param>
            <param name="timestamp">Unix时间戳格式</param>
            <returns>DateTime时间格式</returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.ToUserDateString(System.DateTime,System.Boolean)">
            <summary>
            转换成用户所在时区的时间，并按用户设置返回对应的格式化字符串
            </summary>
            <param name="dateTime">原日期(UTC时间)</param>
            <param name="displayTime">是否显示时间</param>
            <returns>返回用户所在时区时间,并按用户设置返回对应的格式化字符串</returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.GetWeekOfYear(System.DateTime)">
            <summary>
            获取指定日所在周
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.GetClosestMonday(System.DateTime)">
            <summary>
            获取指定日所在周的周一(00:00.000)
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.GetClosestSunday(System.DateTime)">
            <summary>
            获取指定日所在周的周末(23:59.999)
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.ToFriendlyDate(System.DateTime)">
            <summary>
            友好时间格式
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.GetDayofWeek(System.DateTime)">
            <summary>
            获取星期几
            </summary>
            <param name="dateTime"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.DateTimeExtension.GetWeekString(System.DateTime)">
            <summary>
            获得星期描述
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Data.Extensions.DictionaryExtensions">
            <summary>
            对IDictionary的扩展方法
            </summary>
        </member>
        <member name="M:Sop.Data.Extensions.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
             尝试将键和值添加到字典中：如果不存在，才添加；存在，不添加也不抛导常
            </summary>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:Sop.Data.Extensions.DictionaryExtensions.AddOrReplace``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            将键和值添加或替换到字典中：如果不存在，则添加；存在，则替换
            </summary>
        </member>
        <member name="M:Sop.Data.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            向字典中批量添加键值对
            </summary>
        </member>
        <member name="M:Sop.Data.Extensions.DictionaryExtensions.Get``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String,``0)">
            <summary>
            依据key获取字典的value，并转换为需要的类型
            </summary>
            <remarks>
            <para>常用于以下集合：</para>
            <list type="number">
            <item>ViewData</item>
            <item>NameValueCollection：HttpRequest.Form、HttpRequest.Request、HttpRequest.Params</item>
            </list>
            </remarks>
            <param name="dictionary">字典集合</param>
            <param name="key">key</param>
            <param name="defaultValue">如果未找到则返回该默认值</param>
            <returns>取得viewdata里的某个值,并且转换成指定的对象类型,如果不是该类型或如果是一个数组类型而元素为0个或没有此key都将返回空,</returns>
        </member>
        <member name="M:Sop.Data.Extensions.DictionaryExtensions.Get``1(System.Collections.Generic.IDictionary{System.String,System.Object},System.String)">
            <summary>
            依据key获取字典的value，并转换为需要的类型
            </summary>
            <remarks>
            <para>常用于以下集合：</para>
            <list type="number">
            <item>ViewData</item>
            <item>NameValueCollection：HttpRequest.Form、HttpRequest.Request、HttpRequest.Params</item>
            </list>
            </remarks>
            <param name="dictionary">字典集合</param>
            <param name="key">key</param>
            <returns>取得viewdata里的某个值,并且转换成指定的对象类型,如果不是该类型或如果是一个数组类型而元素为0个或没有此key都将返回空,</returns>
        </member>
        <member name="T:Sop.Data.Extensions.EnumExtension">
            <summary>
            枚举类扩展
            </summary>
        </member>
        <member name="M:Sop.Data.Extensions.EnumExtension.EnumMetadataDisplay(System.Enum)">
            <summary>
            获取枚举项上设置的显示文字
            </summary>
            <param name="value">被扩展对象</param>
        </member>
        <member name="T:Sop.Data.Extensions.NameValueCollectionExtension">
            <summary>
            获取Request.QueryString[key],Request.Form[key],Request.Params[key]并进行类型转换
            </summary>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.Get``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            获取请求的参数
            </summary>
            <typeparam name="T">必须是基本类型</typeparam>
            <param name="collection"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.Get``1(System.Collections.Specialized.NameValueCollection,System.String,``0)">
            <summary>
            获取请求的参数
            </summary>
            <typeparam name="T">必须是基本类型</typeparam>
            <param name="collection"></param>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.Gets``1(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            获取请求中的集合数据
            </summary>
            <typeparam name="T">必须是基本类型</typeparam>
            <param name="collection">被扩展集合</param>
            <param name="key">key</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.Gets``1(System.Collections.Specialized.NameValueCollection,System.String,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取请求中的集合数据
            </summary>
            <typeparam name="T">必须是基本类型</typeparam>
            <param name="collection">被扩展集合</param>
            <param name="key">key</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.GetString(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            获取string类型值
            </summary>
            <param name="collection">NameValueCollection</param>
            <param name="key">key</param>
            <param name="defaultValue">默认返回值</param>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.GetInt(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            获取int类型值
            </summary>
            <param name="collection">NameValueCollection</param>
            <param name="key">key</param>
            <param name="defaultValue">默认返回值</param>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.GetFloat(System.Collections.Specialized.NameValueCollection,System.String,System.Single)">
            <summary>
            获取Float类型值
            </summary>
            <param name="collection">NameValueCollection</param>
            <param name="key">key</param>
            <param name="defaultValue">默认返回值</param>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.GetBool(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            获取bool类型值
            </summary>
            <param name="collection">NameValueCollection</param>
            <param name="key">key</param>
            <param name="defaultValue">默认返回值</param>
        </member>
        <member name="M:Sop.Data.Extensions.NameValueCollectionExtension.GetGuid(System.Collections.Specialized.NameValueCollection,System.String,System.Guid)">
            <summary>
            获取Guid类型值
            </summary>
            <param name="collection">NameValueCollection</param>
            <param name="key">key</param>
            <param name="defaultValue">默认返回值</param>
        </member>
        <member name="T:Sop.Data.IPagedList`1">
            <summary>
            Paged list interface
            </summary>
        </member>
        <member name="P:Sop.Data.IPagedList`1.PageIndex">
            <summary>
            第几页
            </summary>
        </member>
        <member name="P:Sop.Data.IPagedList`1.PageSize">
            <summary>
            显示条数
            </summary>
        </member>
        <member name="P:Sop.Data.IPagedList`1.TotalCount">
            <summary>
            总条数
            </summary>
        </member>
        <member name="P:Sop.Data.IPagedList`1.TotalPages">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:Sop.Data.IPagedList`1.HasPreviousPage">
            <summary>
            上一页
            </summary>
        </member>
        <member name="P:Sop.Data.IPagedList`1.HasNextPage">
            <summary>
            下一页
            </summary>
        </member>
        <member name="T:Sop.Data.IRepository`1">
            <summary>
            仓储接口
            </summary>
            <typeparam name="T">仓储对应的实体</typeparam>
        </member>
        <member name="M:Sop.Data.IRepository`1.Get(System.Object)">
            <summary>
            根据Id查询实体
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.IRepository`1.Create(`0)">
            <summary>
            创建实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Sop.Data.IRepository`1.Update(`0)">
            <summary>
            更新实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Sop.Data.IRepository`1.Delete(`0)">
            <summary>
            删除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Sop.Data.IRepository`1.Delete(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            根据查询条件批量删除
            </summary>
            <param name="predicate">查询条件</param>
        </member>
        <member name="P:Sop.Data.IRepository`1.Table">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="M:Sop.Data.IRepository`1.Fetch(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{Sop.Data.OrderTable{`0}})">
            <summary>
            查询
            </summary>
            <param name="predicate">查询条件</param>
            <param name="order">排序</param>
            <returns>IQueryable类型的实体集合</returns>
        </member>
        <member name="M:Sop.Data.IRepository`1.Gets(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Action{Sop.Data.OrderTable{`0}},System.Int32,System.Int32)">
            <summary>
            分页查询
            </summary>
            <param name="predicate">查询条件</param>
            <param name="order">排序</param>
            <param name="pageSize">每页条数</param>
            <param name="pageIndex">第几页</param>
        </member>
        <member name="T:Sop.Data.IWebHelper">
            <summary>
            Represents a common helper
            </summary>
        </member>
        <member name="M:Sop.Data.IWebHelper.GetUrlReferrer">
            <summary>
            Get URL referrer
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.GetCurrentIpAddress">
            <summary>
            Get context IP address
            </summary>
            <returns>URL referrer</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.GetThisPageUrl(System.Boolean)">
            <summary>
            Gets this page name
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <returns>Page name</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.GetThisPageUrl(System.Boolean,System.Boolean)">
            <summary>
            Gets this page name
            </summary>
            <param name="includeQueryString">Value indicating whether to include query strings</param>
            <param name="useSsl">Value indicating whether to get SSL protected page</param>
            <returns>Page name</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.IsCurrentConnectionSecured">
            <summary>
            Gets a value indicating whether current connection is secured
            </summary>
            <returns>true - secured, false - not secured</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.ServerVariables(System.String)">
            <summary>
            Gets server variable by name
            </summary>
            <param name="name">Name</param>
            <returns>Server variable</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.GetStoreHost(System.Boolean)">
            <summary>
            Gets store host location
            </summary>
            <param name="useSsl">Use SSL</param>
            <returns>Store host location</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.GetStoreLocation">
            <summary>
            Gets store location
            </summary>
            <returns>Store location</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.GetStoreLocation(System.Boolean)">
            <summary>
            Gets store location
            </summary>
            <param name="useSsl">Use SSL</param>
            <returns>Store location</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.IsStaticResource(Microsoft.AspNetCore.Http.HttpRequest)">
            <summary>
            Returns true if the requested resource is one of the typical resources that needn't be processed by the cms engine.
            </summary>
            <param name="request">HTTP Request</param>
            <returns>True if the request targets a static resource file.</returns>
            <remarks>
            These are the file extensions considered to be static resources:
            .css
            .gif
            .png 
            .jpg
            .jpeg
            .js
            .axd
            .ashx
            </remarks>
        </member>
        <member name="M:Sop.Data.IWebHelper.ModifyQueryString(System.String,System.String,System.String)">
            <summary>
            Modifies query string
            </summary>
            <param name="url">Url to modify</param>
            <param name="queryStringModification">Query string modification</param>
            <param name="anchor">Anchor</param>
            <returns>New url</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.RemoveQueryString(System.String,System.String)">
            <summary>
            Remove query string from url
            </summary>
            <param name="url">Url to modify</param>
            <param name="queryString">Query string to remove</param>
            <returns>New url</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.QueryString``1(System.String)">
            <summary>
            Gets query string value by name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name">Parameter name</param>
            <returns>Query string value</returns>
        </member>
        <member name="M:Sop.Data.IWebHelper.RestartAppDomain(System.Boolean,System.String)">
            <summary>
            Restart application domain
            </summary>
            <param name="makeRedirect">A value indicating whether we should made redirection after restart</param>
            <param name="redirectUrl">Redirect URL; empty string if you want to redirect to the current page URL</param>
        </member>
        <member name="P:Sop.Data.IWebHelper.IsRequestBeingRedirected">
            <summary>
            Gets a value that indicates whether the client is being redirected to a new location
            </summary>
        </member>
        <member name="P:Sop.Data.IWebHelper.IsPostBeingDone">
            <summary>
            Gets or sets a value that indicates whether the client is being redirected to a new location using POST
            </summary>
        </member>
        <member name="T:Sop.Data.OrderTable`1">
            <summary>
            排序规约类
            </summary>
            <typeparam name="T">要排序的集合项的类型</typeparam>
        </member>
        <member name="P:Sop.Data.OrderTable`1.Queryable">
            <summary>
            已经被排序的IQueryable集合
            </summary>
        </member>
        <member name="M:Sop.Data.OrderTable`1.Asc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
             升序排序
            </summary>
            <typeparam name="TKey">排序字段</typeparam>
            <param name="keySelector">返回TKey的委托</param>
            <returns> OrderTable</returns>
        </member>
        <member name="M:Sop.Data.OrderTable`1.Asc``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            升序排序
            </summary>
            <typeparam name="TKey1">排序字段1</typeparam>
            <typeparam name="TKey2">排序字段2</typeparam>
            <param name="keySelector1">返回TKey1的委托</param>
            <param name="keySelector2">返回TKey2的委托</param>
            <returns> OrderTable</returns>
        </member>
        <member name="M:Sop.Data.OrderTable`1.Asc``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``2}})">
            <summary>
            升序排序
            </summary>
            <typeparam name="TKey1">排序字段1</typeparam>
            <typeparam name="TKey2">排序字段2</typeparam>
            <typeparam name="TKey3">排序字段3</typeparam>
            <param name="keySelector1">返回TKey1的委托</param>
            <param name="keySelector2">返回TKey2的委托</param>
            <param name="keySelector3">返回TKey3的委托</param>
            <returns> OrderTable</returns>
        </member>
        <member name="M:Sop.Data.OrderTable`1.Desc``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
             降序排序
            </summary>
            <typeparam name="TKey">排序字段</typeparam>
            <param name="keySelector">返回TKey的委托</param>
            <returns> OrderTable</returns>
        </member>
        <member name="M:Sop.Data.OrderTable`1.Desc``2(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}})">
            <summary>
            降序排序
            </summary>
            <typeparam name="TKey1">排序字段1</typeparam>
            <typeparam name="TKey2">排序字段2</typeparam>
            <param name="keySelector1">返回TKey1的委托</param>
            <param name="keySelector2">返回TKey2的委托</param>
            <returns> OrderTable</returns>
        </member>
        <member name="M:Sop.Data.OrderTable`1.Desc``3(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Linq.Expressions.Expression{System.Func{`0,``1}},System.Linq.Expressions.Expression{System.Func{`0,``2}})">
            <summary>
            降序排序
            </summary>
            <typeparam name="TKey1">排序字段1</typeparam>
            <typeparam name="TKey2">排序字段2</typeparam>
            <typeparam name="TKey3">排序字段3</typeparam>
            <param name="keySelector1">返回TKey1的委托</param>
            <param name="keySelector2">返回TKey2的委托</param>
            <param name="keySelector3">返回TKey3的委托</param>
            <returns> OrderTable</returns>
        </member>
        <member name="T:Sop.Data.PagedList`1">
            <summary>
            Paged list
            </summary>
            <typeparam name="T">T</typeparam>
        </member>
        <member name="M:Sop.Data.PagedList`1.#ctor(System.Linq.IQueryable{`0},System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
        </member>
        <member name="M:Sop.Data.PagedList`1.#ctor(System.Collections.Generic.IList{`0},System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
        </member>
        <member name="M:Sop.Data.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Ctor
            </summary>
            <param name="source">source</param>
            <param name="pageIndex">Page index</param>
            <param name="pageSize">Page size</param>
            <param name="totalCount">Total count</param>
        </member>
        <member name="T:Sop.Data.PageListExtensions">
            <summary>
            该类包含两个ToPagedList扩展方法，
            用于将泛型IQueryable或泛型IEnumerable对象转换为泛型PagedList对象；
            </summary>
        </member>
        <member name="M:Sop.Data.PageListExtensions.ToPagedList``1(System.Linq.IQueryable{``0},System.Int32,System.Int32)">
            <summary>
            根据当前页索引pageIndex及每页记录数pageSize获取要分页的数据对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="allItems">包含所有要分页数据的IQueryable对象</param>
            <param name="pageIndex">当前页索引</param>
            <param name="pageSize">每页显示的记录数</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.PageListExtensions.ToPagedList``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            根据当前页索引pageIndex及每页记录数pageSize获取要分页的数据对象。
            </summary>
            <typeparam name="T"></typeparam>
            <param name="allItems">包含所有要分页数据的IEnumerable对象</param>
            <param name="pageIndex">当前页索引</param>
            <param name="pageSize">每页显示的记录数</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.Constants">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.Constants.DEFAULT_LOG_TEMPLATE">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.Constants.DefaultLoggerConfiguration(System.String,System.String,Serilog.Events.LogEventLevel)">
            <summary>
            
            </summary>
            <param name="logpath"></param>
            <param name="outputTemplate"></param>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.ContainerBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.ContainerBuilderExtensions.RegisterSerilog(Autofac.ContainerBuilder,System.String,Serilog.Events.LogEventLevel,System.String)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="logPath"></param>
            <param name="logEventLevel"></param>
            <param name="outputTemplate"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.ContainerBuilderExtensions.RegisterSerilog(Autofac.ContainerBuilder,Serilog.LoggerConfiguration)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="loggerConfiguration"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.ContainerBuilderExtensions.RegisterSerilogInternal(Autofac.ContainerBuilder,Serilog.LoggerConfiguration)">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <param name="loggerConfiguration"></param>
            <returns></returns>
        </member>
        <member name="T:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.SerilogModule">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Serilog.Extensions.Autofac.DependencyInjection.SerilogModule.Load(Autofac.ContainerBuilder)">
            <summary>
            
            </summary>
            <param name="builder"></param>
        </member>
        <member name="T:Sop.Data.SopException">
            <summary>
            Represents errors that occur during application execution
            </summary>
        </member>
        <member name="M:Sop.Data.SopException.#ctor">
            <summary>
            Initializes a new instance of the Exception class.
            </summary>
        </member>
        <member name="M:Sop.Data.SopException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Sop.Data.SopException.#ctor(System.String,System.Object[])">
            <summary>
            Initializes a new instance of the Exception class with a specified error message.
            </summary>
            <param name="messageFormat">The exception message format.</param>
            <param name="args">The exception message arguments.</param>
        </member>
        <member name="M:Sop.Data.SopException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Sop.Data.SopException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the Exception class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Sop.Data.Utilities.FileUtility">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Utilities.FileUtility.GetFileExtension(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Utilities.FileUtility.GetFileNameWithoutExtension(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Utilities.FileUtility.FormatSize(System.Double)">
            <summary>
            友好的文件大小信息
            </summary>
            <param name="fileSize">文件字节数</param>
        </member>
        <member name="M:Sop.Data.Utilities.FileUtility.GetFileBytes(System.String)">
            <summary>
            根据格式化的文件大小（KB、MB、GB）获取文件的字节数
            </summary>
            <param name="formattedFileSize">式化的文件大小（KB、MB、GB）</param>
            <returns>文件的字节数</returns>
        </member>
        <member name="T:Sop.Data.Utilities.HtmlDiff">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlDiff.Execute(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="oldText"></param>
            <param name="newText"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlDiff.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="!:Diff"/> class.
            </summary>
            <param name="oldText">The old text.</param>
            <param name="newText">The new text.</param>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlDiff.Build">
            <summary>
            Builds the HTML diff output
            </summary>
            <returns>HTML diff markup</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Sop.Data.Utilities.HtmlDiff.InsertTag(System.String,System.String,System.Collections.Generic.List{System.String})" -->
        <member name="T:Sop.Data.Utilities.HtmlUtility">
            <summary>
            Html工具类
            </summary>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlUtility.TrimHtml(System.String,System.Int32)">
            <summary>
            移除html内的Elemtnts/Attributes及&amp;nbsp;，超过charLimit个字符进行截断
            </summary>
            <param name="rawHtml">待截字的html字符串</param>
            <param name="charLimit">最多允许返回的字符数</param>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlUtility.StripHtml(System.String,System.Boolean,System.Boolean)">
            <summary>
            移除Html标签
            </summary>
            <param name="rawString">待处理字符串</param>
            <param name="removeHtmlEntities">是否移除Html实体</param>
            <param name="enableMultiLine">是否保留换行符（<p/><br/>会转换成换行符）</param>
            <returns>返回处理后的字符串</returns>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlUtility.StripForPreview(System.String)">
            <summary>
            移除Html用于内容预览
            </summary>
            <remarks>
            将br、p替换为\n，“'”替换为对应Html实体，并过滤所有Html、Xml、UBB标签
            </remarks>
            <param name="rawString">用于预览的文本</param>
            <returns>返回移除换行及html、ubb标签的字符串</returns>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlUtility.StripBBTags(System.String)">
            <summary>
            清除UBB标签
            </summary>
            <param name="content">待处理的字符串</param>
            <remarks>处理后的字符串</remarks>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlUtility.StripScriptTags(System.String)">
            <summary>
            移除script标签
            Helper function used to ensure we don't inject script into the db.
            </summary>
            <remarks>
            移除&lt;script&gt;及javascript:
            </remarks>
            <param name="rawString">待处理的字符串</param>
            <remarks>处理后的字符串</remarks>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlUtility.CloseHtmlTags(System.String)">
            <summary>
            闭合未闭合的Html标签
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Data.Utilities.HtmlUtility.CleanHtml(System.String,Sop.Core.Utilities.TrustedHtmlLevel)">
            <summary>
            Html标签过滤/清除
            </summary>
            <remarks>需要在Starter中注册TrustedHtml类，也可以通过重写Basic与HtmlEditor方法来自定义过滤规则</remarks>
            <param name="rawHtml">需要处理的Html字符串</param>
            <param name="level">受信任Html标签严格程度</param>
        </member>
        <member name="T:Sop.Core.Environment.RunningEnvironment">
            <summary>
            默认运行环境实现
            </summary>
        </member>
        <member name="M:Sop.Core.Environment.RunningEnvironment.IsFullTrust">
            <summary>
            是否完全信任运行环境
            </summary>
        </member>
        <member name="M:Sop.Core.Environment.RunningEnvironment.TryWriteWebConfig">
            <summary>
            尝试修改web.config最后更新时间
            </summary>
            <remarks>目的是使应用程序自动重新加载</remarks>
            <returns>修改成功返回true，否则返回false</returns>
        </member>
        <member name="M:Sop.Core.Environment.RunningEnvironment.TryWriteBinFolder">
            <summary>
            尝试引起bin文件夹的改动
            </summary>
            <remarks>目的是使应用程序自动重新加载</remarks>
            <returns>成功写入返回true，否则返回false</returns>
        </member>
        <member name="M:Sop.Core.Environment.RunningEnvironment.IsAssemblyLoaded(System.String)">
            <summary>
            判断一个程序集是否已加载
            </summary>
            <param name="name">程序集名称前缀</param>
            <returns></returns>
        </member>
        <member name="T:Sop.Core.Miscellaneous.LinkedHashSet`1">
            <summary>
            按插入顺序排序的HashSet，类似于Java里的LinkedHashSet
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Sop.Core.Utilities.HtmlDiffAction">
            <summary>
            /
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffAction.equal">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffAction.delete">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffAction.insert">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffAction.none">
            <summary>
            /
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffAction.replace">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Core.Utilities.HtmlDiffMatch">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Core.Utilities.HtmlDiffMode">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffMode.character">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffMode.tag">
            <summary>
            
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.HtmlDiffMode.whitespace">
            <summary>
            
            </summary>
        </member>
        <member name="T:Sop.Core.Utilities.HtmlDiffOperation">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Core.Utilities.HtmlDiffOperation.Action">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Core.Utilities.HtmlDiffOperation.StartInOld">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Core.Utilities.HtmlDiffOperation.EndInOld">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Core.Utilities.HtmlDiffOperation.StartInNew">
            <summary>
            
            </summary>
        </member>
        <member name="P:Sop.Core.Utilities.HtmlDiffOperation.EndInNew">
            <summary>
            
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.HtmlDiffOperation.#ctor(Sop.Core.Utilities.HtmlDiffAction,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="action"></param>
            <param name="startInOld"></param>
            <param name="endInOld"></param>
            <param name="startInNew"></param>
            <param name="endInNew"></param>
        </member>
        <member name="T:Sop.Core.Utilities.HttpCollects">
            <summary>
            Http请求模拟器
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetHTMLContent(System.String)">
            <summary>
            获取文档内容
            </summary>
            <param name="url">Url</param>
            <returns>文档内容</returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetHTMLContent(System.String,System.String)">
            <summary>
            获取文档内容
            </summary>
            <param name="url">Url</param>
            <param name="endRegexString">结束标识的正则表达式</param>
            <returns>文档内容</returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetHTMLContent(System.String,System.Text.Encoding,System.String)">
            <summary>
             获取html文档
             如果endRegexString不为空，则获取从开头到第一次匹配endTagRegex为止的部分文档内容；
             否则获取整个html文档
            </summary>
            <param name="url">Url</param>
            <param name="encoding">HTML内容编码方式</param>
            <param name="endRegexString">结束标识的正则表达式</param>
            <returns>文档内容</returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.getEncoding(System.String)">
             <summary>
             从html文档中得到Encoding
             </summary>
            
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetMetaString(System.String,System.String,System.String,System.Boolean)">
            <summary>
            获取html内容中的meta部分内容
            </summary>
            <param name="html"></param>
            <param name="regStart"></param>
            <param name="regEnd"></param>
            <param name="ignoreCase"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetTitle(System.String,System.Boolean)">
            <summary>
            获取html内容中的Title
            </summary>
            <param name="html">html内容</param>
            <param name="ignoreCas">是否忽略大小写</param>
            <returns>标签title</returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetDescription(System.String,System.Boolean)">
            <summary>
            获取html代码中的description
            </summary>
            <param name="html">html内容</param>
            <param name="ignoreCas">是否忽略大小写</param>
            <returns>description</returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetHtmlByUrl(System.String,System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
            通过url获取html文档
            </summary>
            <param name="url"></param>
            <param name="sMethod"></param>
            <param name="Param"></param>
            <param name="bAutoRedirect"></param>
            <param name="ecode"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetHTMLByUrlCookie(System.String,System.Net.CookieContainer@,System.String,System.String,System.Boolean,System.Text.Encoding)">
            <summary>
             通过UrlCookie获取Html文档
            </summary>
            <param name="url"></param>
            <param name="cookie"></param>
            <param name="sMethod"></param>
            <param name="Param"></param>
            <param name="bAutoRedirect"></param>
            <param name="ecode"></param>
            <returns></returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetHtml(System.String,System.Text.Encoding,System.Int32,System.Int32)">
            <summary>
            请求URL得到HTML内容,私有函数
            </summary>
            <param name="sUrl">url地址</param>
            <param name="sEncode">HTML内容编码方式</param>
            <param name="iMaxRetry">如果请求失败，最大重试次数</param>
            <param name="iCurrentRetry">当前是第几次请求</param>
            <returns>HTML内容</returns>
        </member>
        <member name="M:Sop.Core.Utilities.HttpCollects.GetHtmlWithTried(System.String,System.Text.Encoding,System.Int32)">
            <summary>
            带重试功能的获取HTML内容
            </summary>
            <param name="sUrl">url地址</param>
            <param name="sEncode">HTML内容编码方式</param>
            <param name="iMaxRetry">如果请求失败，最大重试次数</param>
            <returns>HTML内容</returns>
        </member>
        <member name="T:Sop.Core.Utilities.StringUtility">
            <summary>
            字符串工具类
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.StringUtility.Trim(System.String,System.Int32)">
            <summary>
            对字符串进行截字，截去字的部分用"..."替代
            </summary>
            <remarks>
            一个字符指双字节字符，单字节字符仅算半个字符
            </remarks>
            <param name="rawString">待截字的字符串</param>
            <param name="charLimit">截字的长度，按双字节计数</param>
            <returns>截字后的字符串</returns>
        </member>
        <member name="M:Sop.Core.Utilities.StringUtility.Trim(System.String,System.Int32,System.String)">
            <summary>
            对字符串进行截字(区分单字节及双字节字符)
            </summary>
            <remarks>
            一个字符指双字节字符，单字节字符仅算半个字符
            </remarks>
            <param name="rawString">待截字的字符串</param>
            <param name="charLimit">截字的长度，按双字节计数</param>
            <param name="appendString">截去字的部分用替代字符串</param>
            <returns>截字后的字符串</returns>
        </member>
        <member name="M:Sop.Core.Utilities.StringUtility.UnicodeEncode(System.String)">
            <summary>
            Unicode转义序列
            </summary>
            <param name="rawString">待编码的字符串</param>
        </member>
        <member name="M:Sop.Core.Utilities.StringUtility.CleanInvalidCharsForXML(System.String)">
            <summary>
            清除xml中的不合法字符
            </summary>
            <remarks>
            <para>无效字符：</para>
            <list type="number">
            <item>0x00 - 0x08</item>
            <item>0x0b - 0x0c</item>
            <item>0x0e - 0x1f</item>
            </list>
            </remarks>
            <param name="rawXml">待清理的xml字符串</param>
        </member>
        <member name="M:Sop.Core.Utilities.StringUtility.StripSQLInjection(System.String)">
            <summary>
            清理Sql注入特殊字符
            </summary>
            <remarks>
            需清理字符：'、--、exec 、' or
            </remarks>
            <param name="sql">待处理的sql字符串</param>
            <returns>清理后的sql字符串</returns>
        </member>
        <member name="T:Sop.Core.Utilities.TextFormatter">
            <summary>
            用于文本数据格式化
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.TextFormatter.FormatMultiLinePlainTextForStorage(System.String,System.Boolean)">
            <summary>
            多行纯文本型转化为可以在HTML中显示
            </summary>
            <remarks>
            一般在存储到数据库之前进行转化
            </remarks>
            <param name="plainText">需要转化的纯文本</param>
            <param name="keepWhiteSpace">是否保留空格</param>
        </member>
        <member name="M:Sop.Core.Utilities.TextFormatter.FormatMultiLinePlainTextForEdit(System.String,System.Boolean)">
            <summary>
            多行纯文本型转化为可以在TextArea中正常显示
            </summary>
            <remarks>
            一般在进行编辑前进行转化
            </remarks>
            <param name="plainText">需要转化的纯文本</param>
            <param name="keepWhiteSpace">是否保留空格</param>
        </member>
        <member name="M:Sop.Core.Utilities.TextFormatter.FormatPlainTextComment(System.String)">
            <summary>
            格式化纯文本评论
            </summary>
            <remarks>
            进行以下操作：
            1、敏感词过滤
            2、所有链接增加nofollow属性
            3、保留换行及空格的格式
            </remarks>
            <param name="text">格式化的内容</param>
            <returns></returns>
        </member>
        <member name="M:Sop.Core.Utilities.TextFormatter.CleanTagName(System.String)">
            <summary>
            清除标签名称中的非法字词
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.TextFormatter.FormatFriendlyFileSize(System.Double)">
            <summary>
            友好的文件大小信息
            </summary>
            <param name="fileSize">文件字节数</param>
        </member>
        <member name="M:Sop.Core.Utilities.TextFormatter.FormatPlainTextComment(System.String,System.Boolean,System.Boolean)">
            <summary>
            格式化评论内容
            </summary>
            <param name="text">格式化的内容</param>
            <param name="enableNoFollow">Should we include the nofollow rel.</param>
            <param name="enableConversionToParagraphs">Should newlines be converted to P tags.</param>
        </member>
        <member name="M:Sop.Core.Utilities.TextFormatter.ConvertPlainTextToParagraph(System.String)">
            <summary>
            把纯文字格式化成html段落
            </summary>
            <remarks>
            使文本在Html中保留换行的格式
            </remarks>
        </member>
        <member name="T:Sop.Core.Utilities.TrustedHtml">
            <summary>
            Html标签过滤配置类
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.TrustedHtml.addedRules">
            <summary>
            已经添加的规则
            </summary>
        </member>
        <member name="P:Sop.Core.Utilities.TrustedHtml.EncodeHtml">
            <summary>
            是否需要Html编码
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.#ctor(System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="encodeHtml">是否需要htmlencode</param>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.Basic">
            <summary>
            普通受信任标签
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.HtmlEditor">
            <summary>
            编辑器中受信任的标签
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.AddTags(System.String[])">
            <summary>
            添加受信任的标签验证规则
            </summary>
            <param name="tags">受信任的标签</param>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.AddAttributes(System.String,System.String[])">
            <summary>
            添加受信任的标签属性规则
            </summary>
            <param name="tag">标签名</param>
            <param name="keys">标签的受信任属性</param>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.AddGlobalAttributes(System.String[])">
            <summary>
            添加全局受信任的属性
            </summary>
            <param name="attrs">属性名</param>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.AddEnforcedAttribute(System.String,System.String,System.String)">
            <summary>
            添加必须存在的标签属性规则
            </summary>
            <param name="tag">标签名</param>
            <param name="key">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.AddProtocols(System.String,System.String,System.String[])">
            <summary>
            添加标签中被允许协议的Url规则
            </summary>
            <param name="tag">标签名</param>
            <param name="key">属性名</param>
            <param name="protocols">被允许的Url协议</param>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.GetEnforcedAttributes(System.String)">
            <summary>
             获取强制添加的标签属性
            </summary>
            <param name="tag">当前标签名</param>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.IsSafeTag(System.String)">
            <summary>
            判断标签是否被信任
            </summary>
            <param name="tag">标签名</param>
            <returns>true被信任，false反之</returns>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.IsSafeAttribute(System.String,System.String,System.String)">
            <summary>
            验证标签属性是否被信任
            </summary>
            <param name="tag">标签名</param>
            <param name="attr">属性名</param>
            <param name="attrVal">属性值</param>
            <returns>true为被信任，false反之</returns>
        </member>
        <member name="M:Sop.Core.Utilities.TrustedHtml.ValidProtocol(System.String,System.String,System.String)">
            <summary>
            验证标签实行中的Url是否符合限制条件
            </summary>
            <param name="tag">标签名</param>
            <param name="attr">属性名</param>
            <param name="attVal">属性值</param>
            <returns>true为符合限制的，false反之</returns>
        </member>
        <member name="T:Sop.Core.Utilities.TrustedHtmlLevel">
            <summary>
            受信任Html标签的严格程度
            </summary>
        </member>
        <member name="F:Sop.Core.Utilities.TrustedHtmlLevel.Basic">
            <summary>
            普通受信任标签
            </summary>
            <remarks>
            <para>允许使用个别html标签，例如：</para>
            <list type="bullet">
            <item>无Html编辑器的评论表单</item>
            </list>
            </remarks>
        </member>
        <member name="F:Sop.Core.Utilities.TrustedHtmlLevel.HtmlEditor">
            <summary>
            针对于Html编辑器的受信任标签
            </summary>
        </member>
        <member name="T:Sop.Core.Utilities.ValueUtility">
            <summary>
            用于类型转换的工具类
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.ValueUtility.GetSafeSqlDateTime(System.DateTime)">
            <summary>
            获取安全的SQL Server DateTime
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.ValueUtility.GetSafeSqlInt(System.Int32)">
            <summary>
            获取安全的SQL Server int
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.ValueUtility.GetSqlMaxInt">
            <summary>
            获取在SQL Server中可以使用的整型最大值
            </summary>
            <returns></returns>
        </member>
        <member name="M:Sop.Core.Utilities.ValueUtility.ParseInt(System.String[])">
            <summary>
            把字符串数组转换成整型列表
            </summary>
            <param name="strArray">需要转换的字符串数组</param>
            <returns>根据字符串数据转换后的数值集合</returns>
        </member>
        <member name="M:Sop.Core.Utilities.ValueUtility.ChangeType``1(System.Object)">
            <summary>
            把value转换成类型为T的数据，无法进行转换时返回defaultValue
            </summary>
            <typeparam name="T">需转换的类型</typeparam>
            <param name="value">待转换的数据</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="M:Sop.Core.Utilities.ValueUtility.ChangeType``1(System.Object,``0)">
            <summary>
            把value转换成类型为T的数据，无法进行转换时返回defaultValue
            </summary>
            <typeparam name="T">需转换的类型参数</typeparam>
            <param name="value">待转换的数据</param>
            <param name="defalutValue">无法转换时需返回的默认值</param>
            <returns>转换后的数据</returns>
        </member>
        <member name="T:Sop.Core.Utilities.WebUtility">
            <summary>
            提供与Web请求时可使用的工具类，包括Url解析、Url/Html编码、获取IP地址、返回http状态码
            </summary>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.ResolveUrl(System.String)">
            <summary>
            将URL转换为在请求客户端可用的 URL（转换 ~/ 为绝对路径）
            </summary>
            <param name="relativeUrl">相对url</param>
            <returns>返回绝对路径</returns>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.HostPath(System.Uri)">
            <summary>
            获取带传输协议的完整的主机地址
            </summary>
            <param name="uri">Uri</param>
            <returns>
            <para>返回带传输协议的完整的主机地址</para>
                <example>https://www.spacebuilder.cn:8080</example>
            </returns>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.GetPhysicalFilePath(System.String)">
            <summary>
            获取物理文件路径
            </summary>
            <param name="filePath">
                <remarks>
                    <para>filePath支持以下格式：</para>
                    <list type="bullet">
                    <item>~/abc/</item>
                    <item>c:\abc\</item>
                    <item>\\192.168.0.1\abc\</item>
                    </list>
                </remarks>
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.FormatCompleteUrl(System.String)">
            <summary>
            把content中的虚拟路径转化成完整的url
            </summary>
            <remarks>
            例如： /abc/e.aspx 转化成 http://www.SOPCCE.cn/abc/e.aspx
            </remarks>
            <param name="content">content</param>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.GetServerDomain(System.Uri,System.String[])">
            <summary>
            获取根域名
            </summary>
            <param name="uri">uri</param>
            <param name="domainRules">域名规则</param>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.HtmlEncode(System.String)">
            <summary>
            html编码
            </summary>
            <remarks>
            <para>调用HttpUtility.HtmlEncode()，当前已知仅作如下转换：</para>
            <list type="bullet">
                <item>&lt; = &amp;lt;</item>
                <item>&gt; = &amp;gt;</item>
                <item>&amp; = &amp;amp;</item>
                <item>&quot; = &amp;quot;</item>
            </list>
            </remarks>
            <param name="rawContent">待编码的字符串</param>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.HtmlDecode(System.String)">
            <summary>
            html解码
            </summary>
            <param name="rawContent">待解码的字符串</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.UrlEncode(System.String)">
            <summary>
            Url编码
            </summary>
            <param name="urlToEncode">待编码的url字符串</param>
            <returns>编码后的url字符串</returns>
        </member>
        <member name="M:Sop.Core.Utilities.WebUtility.UrlDecode(System.String)">
            <summary>
            Url解码
            </summary>
            <param name="urlToDecode">待解码的字符串</param>
            <returns>解码后的字符串</returns>
        </member>
        <member name="T:Nop.Core.MimeTypes">
            <summary>
            Collection of MimeType Constants for using to avoid Typos
            If needed MimeTypes missing feel free to add
            </summary>
        </member>
        <member name="T:Nop.Core.XmlHelper">
            <summary>
            Xml helper class
            </summary>
        </member>
        <member name="M:Nop.Core.XmlHelper.XmlEncode(System.String)">
            <summary>
            XML Encode
            </summary>
            <param name="str">String</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Nop.Core.XmlHelper.XmlEncodeAsIs(System.String)">
            <summary>
            XML Encode as is
            </summary>
            <param name="str">String</param>
            <returns>Encoded string</returns>
        </member>
        <member name="M:Nop.Core.XmlHelper.XmlEncodeAttribute(System.String)">
            <summary>
            Encodes an attribute
            </summary>
            <param name="str">Attribute</param>
            <returns>Encoded attribute</returns>
        </member>
        <member name="M:Nop.Core.XmlHelper.XmlEncodeAttributeAsIs(System.String)">
            <summary>
            Encodes an attribute as is
            </summary>
            <param name="str">Attribute</param>
            <returns>Encoded attribute</returns>
        </member>
        <member name="M:Nop.Core.XmlHelper.XmlDecode(System.String)">
            <summary>
            Decodes an attribute
            </summary>
            <param name="str">Attribute</param>
            <returns>Decoded attribute</returns>
        </member>
        <member name="M:Nop.Core.XmlHelper.SerializeDateTime(System.DateTime)">
            <summary>
            Serializes a datetime
            </summary>
            <param name="dateTime">Datetime</param>
            <returns>Serialized datetime</returns>
        </member>
        <member name="M:Nop.Core.XmlHelper.DeserializeDateTime(System.String)">
            <summary>
            Deserializes a datetime
            </summary>
            <param name="dateTime">Datetime</param>
            <returns>Deserialized datetime</returns>
        </member>
    </members>
</doc>
